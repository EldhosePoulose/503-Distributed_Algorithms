// This file includes the client side implementation of the algorithm
package client;

import static global.berkeleyParams.dateformatter;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.time.LocalTime;
import java.util.ArrayList;
import global.berkeleyParams;
import server.clockServer;
import server.clockServerImplementation;

//master/Client Side Implementation

public class masterClock {

	public static void main(String[] args) {
		try {
			var slavetimes = new ArrayList<LocalTime>();

			LocalTime locTime = LocalTime.parse("12:00:00", berkeleyParams.dateformatter);
			slavetimes.add(locTime);
			System.out.println("Local time: " + berkeleyParams.dateformatter(locTime));

			// Connect to slave 01 and get Time
			Registry registry01 = LocateRegistry.getRegistry(berkeleyParams.servername01, berkeleyParams.serverport01);
			clockServer ts01 = (clockServer) registry01.lookup(clockServerImplementation.class.getSimpleName());
			System.out.println("Connected successfully to: SLAVE 01");
			LocalTime slaveTime01 = ts01.getTime();
			slavetimes.add(slaveTime01);
			System.out.println("time at slave 01 is: " + formatter.format(slaveTime01));

			// Connect to slave 02 and get Time
			Registry registry02 = LocateRegistry.getRegistry(berkeleyParams.servername02, berkeleyParams.serverport02);
			clockServer ts02 = (clockServer) registry02.lookup(clockServerImplementation.class.getSimpleName());
			System.out.println("Connected successfully to: SLAVE 02");
			LocalTime slaveTime02 = ts02.getTime();
			slavetimes.add(slaveTime02);
			System.out.println("time at slave 02 is: " + formatter.format(slaveTime02));


			// Connect to slave 03 and get Time
			Registry registry03 = LocateRegistry.getRegistry(berkeleyParams.servername03, berkeleyParams.serverport03);
			clockServer ts03 = (clockServer) registry03.lookup(clockServerImplementation.class.getSimpleName());
			System.out.println("Connected successfully to: SLAVE 03");
			LocalTime slaveTime03 = ts03.getTime();
			slavetimes.add(slaveTime03);
			System.out.println("time at slave 03 is: " + formatter.format(slaveTime03));
			
			

			var nanoLocal = locTime.toNanoOfDay();
			var diffMachine1 = slaveTime01.toNanoOfDay() - nanoLocal;
			var diffMachine2 = TimeServer2.toNanoOfDay() - nanoLocal;
			var diffMachine3 = TimeServer3.toNanoOfDay() - nanoLocal;
			var avgDiff = (diffMachine1 + diffMachine2 + diffMachine3) / 3; 

			// Assign new time
			ts1.adjustTime(locTime, avgDiff);
			ts2.adjustTime(locTime, avgDiff);
			ts3.adjustTime(locTime, avgDiff);
			locTime = locTime.plusNanos(avgDiff);
			System.out.println("Time was adjusted successfuly");

			// Verifying the time on all machines
			System.out.println("Local time: " + formatter.format(locTime));
			System.out.println("Machine 1 time: " + formatter.format(ts1.getTime()));
			System.out.println("Machine 2 time: " + formatter.format(ts2.getTime()));
			System.out.println("Machine 3 time: " + formatter.format(ts3.getTime()));
		} catch (Exception ex) {
			System.out.println(ex);
		}
	}

}
